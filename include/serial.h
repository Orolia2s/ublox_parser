#pragma once

/**
 * @file serial.h
 * Manipulate a serial port connection
 */

#include <termios.h> // for the union :/

#include <stdint.h> // uint*_t

/**
 * Verbose alternative to termios.c_iflag.
 */
struct serial_input_modes
{
	uint32_t ignore_break          :1; /**< Ignore break condition. */
	uint32_t signal_break          :1; /**< Signal interrupt on break. */
	uint32_t discard_invalid_chars :1; /**< Ignore characters with parity errors. */
	uint32_t mark_errors           :1; /**< Mark parity and framing errors. */

	uint32_t parity_check          :1; /**< Enable input parity check */
	uint32_t strip_8th_bit         :1; /**< Strip 8th bit off characters */
	uint32_t map_nl_to_cr          :1; /**< Map NL to CR on input */
	uint32_t ignore_cr             :1; /**< Ignore CR */
	uint32_t map_cr_to_nl          :1; /**< Map CR to NL on input */
	/** Map uppercase characters to lowercase on input. */
	uint32_t map_upper_to_lower       :1;
	uint32_t enable_start_stop_output :1; /**< Enable start/stop output control */
	uint32_t enable_any_char_to_restart_output :1; /**< Enable any character to restart output */
	uint32_t enable_start_stop_input :1; /**< Enable start/stop input control */
	uint32_t ring_bell_when_input_queue_is_full :1; /**< Ring bell when input queue is full */
	uint32_t is_utf8                            :1; /**< Input is UTF8 */
};

/* Generated by chatGPT:
struct serial_input_modes
{
    uint32_t ignore_break_condition   :1; /**< Ignore break condition
    uint32_t signal_interrupt_on_break:1; /**< Signal interrupt on break
    uint32_t ignore_parity_errors     :1; /**< Ignore characters with parity errors
    uint32_t mark_parity_errors       :1; /**< Mark parity and framing errors
    uint32_t enable_input_parity_check:1; /**< Enable input parity check
    uint32_t strip_8th_bit_off_chars  :1; /**< Strip 8th bit off characters
    uint32_t map_nl_to_cr_on_input    :1; /**< Map NL to CR on input
    uint32_t ignore_cr                :1; /**< Ignore CR
    uint32_t map_cr_to_nl_on_input    :1; /**< Map CR to NL on input
    uint32_t map_uppercase_to_lowercase:1; /**< Map uppercase characters to lowercase on input
    uint32_t enable_start_stop_output :1; /**< Enable start/stop output control
    uint32_t enable_any_char_to_restart_output:1; /**< Enable any character to restart output
    uint32_t enable_start_stop_input  :1; /**< Enable start/stop input control
    uint32_t ring_bell_when_input_queue_is_full:1; /**< Ring bell when input queue is full
    uint32_t input_is_utf8            :1; /**< Input is UTF8
};
*/

/**
 * Verbose alternative to termios.c_cflag
 *
 * This structures stores the terminal flags and fields that control parameters
 * usually associated with asynchronous serial data transmission.
 * These flags may not make sense for other kinds of terminal ports
 * (such as a network connection pseudo-terminal).
 */
struct serial_control_modes
{
	uint32_t _              :4; /**< Unused */
	uint32_t character_size :2; /**< Number of bits used by a single character */
	uint32_t two_stop_bits  :1; /**< Set two stop bits, rather than one */
	uint32_t read           :1; /**< Enable receiver */
	/** Enable parity generation on output and parity checking for input. */
	uint32_t enable_parity  :1;
	/** If set, then parity for input and output is odd; otherwise even parity is used. */
	uint32_t odd_parity     :1;
	/** Lower modem control lines after last process closes the device (hang up). */
	uint32_t hang_up        :1;
	uint32_t is_local       :1; /**< Ignore modem control lines */
};

/**
 * Possible values of @ref serial_control_modes::character_size
 */
enum character_size
{
	character_size_5 = 0,
	character_size_6 = 1,
	character_size_7 = 2,
	character_size_8 = 3
};

typedef union serial_options serial_options_t;
union serial_options
{
	struct termios termios;
	struct
	{
		struct serial_input_modes   input;
		struct serial_control_modes output;
		struct serial_control_modes control;
	};
};

int ublox_open_serial_port(const char* port_name);

/**
@var serial_input_modes::discard_invalid_chars
If this bit is set, any byte with a framing or parity error is ignored.
This is only useful if INPCK is also set.

@var serial_input_modes::ignore_break
If this bit is set, break conditions are ignored.

A break condition is defined in the context of asynchronous serial data
transmission as a series of zero-value bits longer than a single byte.
*/

/**
@var serial_control_modes::character_size
See the character_size enum for possible values

@var serial_control_modes::is_local
If this bit is set, it indicates that the terminal is connected “locally”
and that the modem status lines (such as carrier detect) should be ignored.

On many systems if this bit is not set and you call open without the
`O_NONBLOCK` flag set, open blocks until a modem connection is established.

If this bit is not set and a modem disconnect is detected, a `SIGHUP` signal
is sent to the controlling process group for the terminal (if it has one).
Normally, this causes the process to exit; see Signal Handling.
Reading from the terminal after a disconnect causes an end-of-file condition,
and writing causes an `EIO` error to be returned.
The terminal device must be closed and reopened to clear the condition.

@var serial_control_modes::hang_up
If this bit is set, a modem disconnect is generated when all processes
that have the terminal device open have either closed the file or exited.

@var serial_control_modes::read
If this bit is set, input can be read from the terminal.
Otherwise, input is discarded when it arrives.

@var serial_control_modes::two_stop_bits
If this bit is set, two stop bits are used. Otherwise, only one stop bit is used.

@var serial_control_modes::enable_parity
If this bit is set, generation and detection of a parity bit are enabled.
See Input Modes, for information on how input parity errors are handled.

If this bit is not set, no parity bit is added to output characters,
and input characters are not checked for correct parity.

@var serial_control_modes::odd_parity
This bit is only useful if @ref enable_parity is set.
If @ref odd_parity is set, odd parity is used,
otherwise even parity is used.
*/
